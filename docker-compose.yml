services:
  qdrant:
    image: qdrant/qdrant:v1.9.0
    ports:
      - "6333:6333"
      - "6334:6334"
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      # Enable graceful shutdown
      QDRANT__SERVICE__GRACEFUL_SHUTDOWN_TIMEOUT: "30"
      QDRANT__SERVICE__ENABLE_GRACEFUL_SHUTDOWN: "true"
      # Ensure WAL sync for data durability
      QDRANT__STORAGE__WAL__SYNC_ON_WRITE: "false"
      # Storage path
      QDRANT__STORAGE__STORAGE_PATH: "/qdrant/storage"
      # WAL configuration
      QDRANT__STORAGE__WAL__WAL_CAPACITY_MB: "32"
      QDRANT__STORAGE__WAL__WAL_SEGMENTS_AHEAD: "0"
      # Service ports
      QDRANT__SERVICE__HTTP_PORT: "6333"
      QDRANT__SERVICE__GRPC_PORT: "6334"
      # Performance settings
      QDRANT__PERFORMANCE__MAX_OPTIMIZATION_THREADS: "4"
      QDRANT__PERFORMANCE__MAX_INDEXING_THREADS: "4"
      # Disable cluster and telemetry
      QDRANT__CLUSTER__ENABLED: "false"
      QDRANT__TELEMETRY__ENABLED: "false"
    restart: unless-stopped
    stop_grace_period: 30s

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    restart: unless-stopped

  landing-next:
    build: ./landing-next
    ports:
      - "8090:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  ingestion-service:
    build:
      context: .
      dockerfile: ingestion-service/Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
      TASK_SERVICE_URL: "http://task-service:8010"
      MAX_UPLOAD_MB: "4"
    restart: unless-stopped

  embedding-service:
    build:
      context: .
      dockerfile: embedding-service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      QDRANT_URL: "http://qdrant:6333"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      TASK_SERVICE_URL: "http://task-service:8010"
    restart: unless-stopped

  ai-agent-service:
    build: ./ai-agent-service
    ports:
      - "8002:8002"
    environment:
      QDRANT_URL: "http://qdrant:6333"
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    restart: unless-stopped



  document-parsing-service:
    build:
      context: .
      dockerfile: document-parsing-service/Dockerfile
      args:
        PDF_PARSER_VERSION: "${PDF_PARSER_VERSION:-fast-pdf-parser-1}"
        DOCX_PARSER_VERSION: "${DOCX_PARSER_VERSION:-fast-docx-parser-1}"
    ports:
      - "8005:8005"
    environment:
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
      LOG_LEVEL: "INFO"
      PDF_PARSER_VERSION: "${PDF_PARSER_VERSION:-fast-pdf-parser-1}"
      DOCX_PARSER_VERSION: "${DOCX_PARSER_VERSION:-fast-docx-parser-1}"
      TASK_SERVICE_URL: "http://task-service:8010"
    depends_on:
      - db
      - minio
    restart: unless-stopped

  chunking-service:
    build:
      context: .
      dockerfile: chunking-service/Dockerfile
    ports:
      - "8006:8006"
    environment:
      TASK_SERVICE_URL: "http://task-service:8010"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
    depends_on:
      - minio
    restart: unless-stopped

  redaction-service:
    build:
      context: .
      dockerfile: redaction-service/Dockerfile
    ports:
      - "8007:8007"
    environment:
      TASK_SERVICE_URL: "http://task-service:8010"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
    depends_on:
      - chunking-service
    restart: unless-stopped

  data-generator:
    build: ./data-generator
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - ./customer_service_data:/app/customer_service_data
    profiles:
      - generate-data

  task-service:
    build: ./task-service
    ports:
      - "8010:8010"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}"
      PARSING_SERVICE_URL: "http://document-parsing-service:8005"
      CHUNKING_SERVICE_URL: "http://chunking-service:8006"
      REDACTION_SERVICE_URL: "http://redaction-service:8007"
      EMBEDDING_SERVICE_URL: "http://embedding-service:8001"
      INDEX_DOCUMENT_SERVICE_URL: "http://index-document-service:8011"
    depends_on:
      - db
    restart: unless-stopped

  index-document-service:
    build:
      context: .
      dockerfile: index-document-service/Dockerfile
    ports:
      - "8011:8011"
    environment:
      TASK_SERVICE_URL: "http://task-service:8010"
    depends_on:
      - task-service
    restart: unless-stopped

volumes:
  postgres_data:
  qdrant_storage: 