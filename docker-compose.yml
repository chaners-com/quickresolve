services:
  qdrant:
    image: qdrant/qdrant:v1.9.0
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      # Enable graceful shutdown
      QDRANT__SERVICE__GRACEFUL_SHUTDOWN_TIMEOUT: "30"
      QDRANT__SERVICE__ENABLE_GRACEFUL_SHUTDOWN: "true"
      # Ensure WAL sync for data durability
      QDRANT__STORAGE__WAL__SYNC_ON_WRITE: "true"
      # Storage path
      QDRANT__STORAGE__STORAGE_PATH: "/qdrant/storage"
      # WAL configuration
      QDRANT__STORAGE__WAL__WAL_CAPACITY_MB: "32"
      QDRANT__STORAGE__WAL__WAL_SEGMENTS_AHEAD: "0"
      # Service ports
      QDRANT__SERVICE__HTTP_PORT: "6333"
      QDRANT__SERVICE__GRPC_PORT: "6334"
      # Performance settings
      QDRANT__PERFORMANCE__MAX_OPTIMIZATION_THREADS: "2"
      QDRANT__PERFORMANCE__MAX_INDEXING_THREADS: "2"
      # Disable cluster and telemetry
      QDRANT__CLUSTER__ENABLED: "false"
      QDRANT__TELEMETRY__ENABLED: "false"
    restart: unless-stopped
    stop_grace_period: 30s

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    restart: unless-stopped

  ingestion-service:
    build: ./ingestion-service
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
    restart: unless-stopped

  embedding-service:
    build: ./embedding-service
    ports:
      - "8001:8001"
    environment:
      QDRANT_URL: "http://qdrant:6333"
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      INGESTION_SERVICE_URL: "${INGESTION_SERVICE_URL:-http://ingestion-service:8000}"
    restart: unless-stopped

  ai-agent-service:
    build: ./ai-agent-service
    ports:
      - "8002:8002"
    environment:
      QDRANT_URL: "http://qdrant:6333"
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    restart: unless-stopped

  snapshot-service:
    build: ./snapshot-service
    ports:
      - "8003:8003"
    environment:
      QDRANT_URL: "http://qdrant:6333"
      COLLECTION_NAME: "file_embeddings"
      SNAPSHOT_INTERVAL: "300"
      MAX_SNAPSHOTS: "10"
      LOG_LEVEL: "INFO"
    volumes:
      - ./qdrant_snapshots:/app/snapshots
      - ./qdrant_storage:/qdrant_storage:ro
    restart: unless-stopped

  management-service:
    build: ./management-service
    ports:
      - "8004:8004"
    environment:
      LOG_LEVEL: "INFO"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  document-parsing-service:
    build: ./document-parsing-service
    ports:
      - "8005:8005"
    environment:
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "${MINIO_ROOT_USER}"
      S3_SECRET_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
      LOG_LEVEL: "INFO"
    depends_on:
      - db
      - minio
    restart: unless-stopped

  data-generator:
    build: ./data-generator
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - ./customer_service_data:/app/customer_service_data
    profiles:
      - generate-data

volumes:
  postgres_data:
  qdrant_storage: 